variables:
  GIT_SUBMODULE_STRATEGY: recursive

before_script:
  - whoami
  - groups
  - nix-shell --run "rustc --version"

check_format:
  tags:
    - rust
    - nix
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - nix-shell --run "cargo fmt --all -- --check"

check_clippy:
  interruptible: true
  tags:
    - rust
    - nix
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - nix-shell --run "cargo clippy --all --all-targets -- --deny warnings"

check_test:
  interruptible: true
  tags:
    - rust
    - nix
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - nix-shell --run "cargo test --workspace --all-targets --no-fail-fast"
  retry: 2 # Sometimes X clients just crash

build_release_x64:
  interruptible: true
  tags:
    - rust
    - nix
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
  allow_failure: true
  script:
    - export VERSION=$(date +%Y.%m.%d.%H.%M)
    - export PACKAGE_REGISTRY_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/openfa/${VERSION}"
    - export PACKAGE_LINUX_X64="openfa-linux-x86_64.tar.xz"
    - export PACKAGE_WINDOWS_X64="openfa-win-x86_64.zip"
    - nix-shell --run "cargo build --release --all"
    - mkdir "openfa-$VERSION"
    - cp target/release/openfa "openfa-$VERSION"/
    - cp target/release/dump-pic "openfa-$VERSION"/
    - tar -C "openfa-$VERSION/" -cJvf "../${PACKAGE_LINUX_X64}" .
    - mv "../${PACKAGE_LINUX_X64}" .
    - rm -rfv "openfa-$VERSION"
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${PACKAGE_LINUX_X64} "${PACKAGE_REGISTRY_URL}/${PACKAGE_LINUX_X64}"'
    - nix-shell --run "cargo build --target x86_64-pc-windows-gnu --release --all"
    - zip $PACKAGE_WINDOWS_X64 target/x86_64-pc-windows-gnu/release/openfa.exe  target/x86_64-pc-windows-gnu/release/dump-pic.exe
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file ${PACKAGE_WINDOWS_X64} "${PACKAGE_REGISTRY_URL}/${PACKAGE_WINDOWS_X64}"'
    - |
      /etc/nixos/release-cli create --name "Release $VERSION" --tag-name $VERSION \
        --assets-link "{\"name\":\"${PACKAGE_LINUX_X64}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_LINUX_X64}\"}"
        --assets-link "{\"name\":\"${PACKAGE_WINDOWS_X64}\",\"url\":\"${PACKAGE_REGISTRY_URL}/${PACKAGE_WINDOWS_X64}\"}"
